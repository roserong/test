//製作一副鋪克牌
var poker=[];
for(var i=0;i<52;i++){
    switch(parseInt(i/13)){
        case 0:
            poker.push("H"+(parseInt(i%13)+1));
            break;
        case 1:
            poker.push("S"+(parseInt(i%13)+1));
            break;
        case 2:
            poker.push("C"+(parseInt(i%13)+1));
            break;
        case 3:
            poker.push("D"+(parseInt(i%13)+1));
    }
   
}
console.log(poker.toString());
var player1=[], player2=[], player3=[],player4=[];
//打亂
for (let i = 0; i < poker.length; ) {
    var rand = Math.floor(Math.random() * poker.length);
//分配
//splice 刪除/取代
    player1.push(poker[rand]);
    poker.splice(rand,1);

    var rand = Math.floor(Math.random() * poker.length);
   
    player2.push(poker[rand]);
    poker.splice(rand,1);

    var rand = Math.floor(Math.random() * poker.length);
    
    player3.push(poker[rand]);
    poker.splice(rand,1);

    var rand = Math.floor(Math.random() * poker.length);
    
    player4.push(poker[rand]);
    poker.splice(rand,1);
    
}
//排序
//isNaN 判斷是否為非字元
//由大排到小
function compare(b,a){   
    if(a.charCodeAt(0) == b.charCodeAt(0)){  
        if(isNaN(a.charCodeAt(2))&&isNaN(b.charCodeAt(2))){ 
            return a.charCodeAt(1) - b.charCodeAt(1)
        }else if(isNaN(a.charCodeAt(2))||isNaN(b.charCodeAt(2))){  
            if(isNaN(a.charCodeAt(2))){
                return -1
            }else{
                return 1
            }
        }else{  
            return a.charCodeAt(2) - b.charCodeAt(2)
        }
    }else{
        return a.charCodeAt(0) - b.charCodeAt(0)
    }
}
console.log("Player1:"+player1)
player1.sort(compare);
console.log("Player1:"+player1)

console.log("Player2:"+player2)
player2.sort(compare)
console.log("Player2:"+player2)

console.log("Player3:"+player3)
player3.sort(compare)
console.log("Player3:"+player3)

console.log("Player4:"+player4)
player4.sort(compare)
console.log("Player4:"+player4)
